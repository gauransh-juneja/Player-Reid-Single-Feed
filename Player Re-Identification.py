# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-t4fLVf7KVlMvDQOy4EJFF7yhuWWv80O
"""

!pip install ultralytics opencv-python-headless matplotlib
!pip install gdown

import cv2
import torch
import numpy as np
from ultralytics import YOLO
import matplotlib.pyplot as plt

!gdown https://drive.google.com/uc?id=1-5fOSHOSB9UXyP_enOoZNAMScrePVcMD -O yolo_reid.pt

model = YOLO("yolo_reid.pt")

from google.colab import files
uploaded = files.upload()

from google.colab.patches import cv2_imshow

video_path = "15sec_input_720p.mp4"
cap = cv2.VideoCapture(video_path)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    results = model.predict(source=frame, save=False, conf=0.3)
    for r in results:
        for box in r.boxes:
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

    cv2_imshow(frame)
    break  # only show one frame for test

cap.release()

def get_centroid(x1, y1, x2, y2):
    return ((x1 + x2) // 2, (y1 + y2) // 2)

next_id = 0
tracked_players = {}  # player_id: (centroid_x, centroid_y)
max_distance = 50  # pixels

from google.colab.patches import cv2_imshow
import cv2
import torch
import numpy as np
from ultralytics import YOLO

model = YOLO("yolo_reid.pt")

def get_centroid(x1, y1, x2, y2):
    return ((x1 + x2) // 2, (y1 + y2) // 2)

video_path = "15sec_input_720p.mp4"
cap = cv2.VideoCapture(video_path)

next_id = 0
tracked_players = {}  # player_id: (centroid_x, centroid_y)
max_distance = 50

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    results = model.predict(source=frame, save=False, conf=0.3)
    detections = []

    for r in results:
        for box in r.boxes:
            cls = int(box.cls[0])
            if cls == 0:  # 0 = ball, 1 = player, 2 = referee (based on custom model assumption)
                continue  # skip ball
            if cls == 1:  # player
                x1, y1, x2, y2 = map(int, box.xyxy[0])
                detections.append(((x1, y1, x2, y2), get_centroid(x1, y1, x2, y2)))

    updated_tracks = {}
    for det_box, centroid in detections:
        matched_id = None
        for pid, prev_centroid in tracked_players.items():
            dist = np.linalg.norm(np.array(centroid) - np.array(prev_centroid))
            if dist < max_distance:
                matched_id = pid
                break

        if matched_id is None:
            matched_id = next_id
            next_id += 1

        updated_tracks[matched_id] = centroid
        x1, y1, x2, y2 = det_box
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(frame, f"ID {matched_id}", (x1, y1 - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

    tracked_players = updated_tracks
    cv2_imshow(frame)

    key = cv2.waitKey(1)
    if key == ord('q'):
        break

cap.release()